"use strict";(self.webpackChunkrim_tub_docs_release=self.webpackChunkrim_tub_docs_release||[]).push([[6968],{3241:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"storages/db","title":"SQL Database (db)","description":"The primary, persistent storage. SQLite database is used.","source":"@site/docs/10_storages/00_DB.md","sourceDirName":"10_storages","slug":"/storages/db","permalink":"/docs/storages/db","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":0,"frontMatter":{"title":"SQL Database (db)","sidebar_position":0,"slug":"db","id":"db"},"sidebar":"tutorialSidebar","previous":{"title":"Data Storages","permalink":"/docs/category/data-storages"},"next":{"title":"Temporary Storage (st)","permalink":"/docs/storages/st"}}');var i=s(4848),r=s(8453);const a={title:"SQL Database (db)",sidebar_position:0,slug:"db",id:"db"},d=void 0,l={},c=[{value:"Methods",id:"methods",level:2},{value:"<strong>Set-Get</strong> System",id:"set-get-system",level:2},{value:"async <code>set</code>",id:"async-set",level:3},{value:"async <code>get</code>",id:"async-get",level:3},{value:"async <code>getall</code>",id:"async-getall",level:3},{value:"async <code>remove</code> / <code>delete</code>",id:"async-remove--delete",level:3},{value:"SQL",id:"sql",level:2},{value:"async <code>sql</code>",id:"async-sql",level:3},{value:"Examples:",id:"examples",level:2}];function o(e){const n={a:"a",admonition:"admonition",code:"code",em:"em",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:"The primary, persistent storage. SQLite database is used."}),"\n",(0,i.jsxs)(n.p,{children:["Each module has its own database (and each account has its own). These databases are located at ",(0,i.jsx)(n.code,{children:"/databases/<ModuleName>/database_<user_id>.db"}),". This path can be obtained using ",(0,i.jsx)(n.a,{href:"./module#db_path",children:(0,i.jsx)(n.code,{children:"mod.db_path"})}),"."]}),"\n",(0,i.jsx)(n.h2,{id:"methods",children:"Methods"}),"\n",(0,i.jsxs)(n.h2,{id:"set-get-system",children:[(0,i.jsx)(n.strong,{children:"Set-Get"})," System"]}),"\n",(0,i.jsxs)(n.p,{children:["Data is stored in a key-value format. Only simple data types and structures can be stored: ",(0,i.jsx)(n.code,{children:"str"}),", ",(0,i.jsx)(n.code,{children:"int"}),", ",(0,i.jsx)(n.code,{children:"float"}),", ",(0,i.jsx)(n.code,{children:"bool"}),", ",(0,i.jsx)(n.code,{children:"None"}),", ",(0,i.jsx)(n.code,{children:"list"}),", ",(0,i.jsx)(n.code,{children:"dict"}),"."]}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["Below, the term ",(0,i.jsx)(n.em,{children:"Any"})," refers to the aforementioned simple data types and structures."]})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.h3,{id:"async-set",children:["async ",(0,i.jsx)(n.code,{children:"set"})]}),"\n",(0,i.jsx)(n.p,{children:"Sets a value."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"variable"})," (",(0,i.jsx)(n.em,{children:"str"}),") - Name of the variable (key)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"value"})," (",(0,i.jsx)(n.em,{children:"Any"}),") - Value."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": ",(0,i.jsx)(n.em,{children:"None"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"await mod.db.set('count', 10)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.h3,{id:"async-get",children:["async ",(0,i.jsx)(n.code,{children:"get"})]}),"\n",(0,i.jsxs)(n.p,{children:["Retrieves a value. If no record with the specified key exists, ",(0,i.jsx)(n.code,{children:"default"})," is returned."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"variable"})," (",(0,i.jsx)(n.em,{children:"str"}),") - Name of the variable (key)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"default"})," (",(0,i.jsx)(n.em,{children:"optional"}),") = ",(0,i.jsx)(n.em,{children:"None"})," - Default value to return if ",(0,i.jsx)(n.code,{children:"variable"})," is not found."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": ",(0,i.jsx)(n.em,{children:"Any"})," - The value of the variable."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"count = await mod.db.get('count', 0)\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.h3,{id:"async-getall",children:["async ",(0,i.jsx)(n.code,{children:"getall"})]}),"\n",(0,i.jsx)(n.p,{children:"Retrieves all values."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"default"})," (",(0,i.jsx)(n.em,{children:"optional"}),") = ",(0,i.jsx)(n.em,{children:"None"})," - Default value to return if no variables exist in the database."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": ",(0,i.jsx)(n.em,{children:"List[str, Any]"})," - A dictionary of values where keys are variable names."]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"all_values = await mod.db.getall()\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.h3,{id:"async-remove--delete",children:["async ",(0,i.jsx)(n.code,{children:"remove"})," / ",(0,i.jsx)(n.code,{children:"delete"})]}),"\n",(0,i.jsx)(n.p,{children:"Deletes a variable from the database."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"variable"})," (",(0,i.jsx)(n.em,{children:"str"}),") - Name of the variable to delete."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": ",(0,i.jsx)(n.em,{children:"None"})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:"await mod.db.remove('count')\n"})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sql",children:"SQL"}),"\n",(0,i.jsx)(n.p,{children:"In addition to set-get, you can use the SQL database directly via SQL queries!"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.h3,{id:"async-sql",children:["async ",(0,i.jsx)(n.code,{children:"sql"})]}),"\n",(0,i.jsx)(n.p,{children:"Executes an SQL query."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sql"})," (",(0,i.jsx)(n.em,{children:"str"}),") - SQL query."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"asdict"})," (",(0,i.jsx)(n.em,{children:"optional"}),", ",(0,i.jsx)(n.em,{children:"bool"}),") = ",(0,i.jsx)(n.em,{children:"False"})," - Return results as a dictionary (column: value)."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"**params"})," - Values to pass into the SQL query."]}),"\n"]}),"\n",(0,i.jsxs)(n.admonition,{type:"danger",children:[(0,i.jsxs)(n.p,{children:["Always use query parameters (",(0,i.jsx)(n.code,{children:"**params"}),") for value substitution!"]}),(0,i.jsx)(n.p,{children:(0,i.jsxs)(n.strong,{children:["Do not insert data directly using f-strings or ",(0,i.jsx)(n.code,{children:"+"}),", as this opens vulnerabilities for SQL injection."]})}),(0,i.jsxs)(n.p,{children:["\u2705 ",(0,i.jsx)(n.strong,{children:"Correct:"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'await mod.db.sql("SELECT * FROM users WHERE age > :age", age=18)\n'})}),(0,i.jsxs)(n.p,{children:["\u274c ",(0,i.jsx)(n.strong,{children:"Incorrect:"})]}),(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'await mod.db.sql(f"SELECT * FROM users WHERE age > {age}")  # Vulnerable!!!!\n'})}),(0,i.jsxs)(n.p,{children:["Passing parameters via ",(0,i.jsx)(n.code,{children:"**params"})," automatically protects against attacks and ensures code safety."]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),": ",(0,i.jsx)(n.em,{children:"None"})," | ",(0,i.jsx)(n.em,{children:"Tuple[Tuple[Any]]"})," | ",(0,i.jsx)(n.em,{children:"Dict[str, Any]"})," - The result of the SQL query."]}),"\n",(0,i.jsxs)(n.admonition,{type:"info",children:[(0,i.jsx)(n.p,{children:"If the query returns data, the output will be as follows:"}),(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["With ",(0,i.jsx)(n.code,{children:"asdict=True"}),": ",(0,i.jsx)(n.code,{children:"[{column: value, ...}, ...]"})]}),"\n",(0,i.jsxs)(n.li,{children:["With ",(0,i.jsx)(n.code,{children:"asdict=False"}),": ",(0,i.jsx)(n.code,{children:"[(value1, value2, ...), ...]"})]}),"\n"]})]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Example"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",children:'result = await mod.db.sql("SELECT id, name FROM users WHERE age > :age", asdict=True, age=18)\r\n# Example result: [{"id": 1, "name": "Alice"}, {"id": 2, "name": "Bob"}]\n'})}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"examples",children:"Examples:"}),"\n",(0,i.jsx)(n.admonition,{type:"info",children:(0,i.jsxs)(n.p,{children:["The following examples are taken from the ",(0,i.jsx)(n.strong,{children:"MineEvoMiner"})," module (version 2.5) by third-party developer ",(0,i.jsx)(n.a,{href:"t.me/Kotcananacom",children:"@Kotcananacom"}),"."]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:'title="MineEvoMiner/miner/mine.py, lines 25-42" showLineNumbers',children:"# When the client is running\r\nasync def stats_ready(app: Client, mod: Module):\r\n    AutoStopTimer(app, mod)\r\n    mod.add_task(miner(app, mod))\r\n    # highlight-start\r\n    if await mod.db.get('mine', False):\r\n        await mod.db.set('start_mine', time.time())\r\n    await mod.db.sql(\"CREATE TABLE IF NOT EXISTS mineevo_stats (type_case TEXT, type_bust TEXT, count INTEGER, timee TEXT)\")\r\n    # highlight-end\r\n    await initialization_found(app, mod)\r\n\r\n    \r\n# Enable/disable beautiful formatting for found cases\r\nasync def beautiful_case_found(app: Client, msg: Message, mod: Module):\r\n    # highlight-start\r\n    beautiful = await mod.db.get('beautiful_found', False)\r\n    await mod.db.set('beautiful_found', not beautiful)\r\n    # highlight-end\r\n    if beautiful:\r\n        await msg.edit(f\"{Emojis.YES_2} {b('Beautiful formatting for found cases disabled')}\")\r\n    else:\r\n        await msg.edit(f\"{Emojis.YES} {b('Beautiful formatting for found cases enabled')}\")\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-py",metastring:'title="MineEvoMiner/miner/mine.py, lines 161-177" showLineNumbers',children:"# Enable/disable mining\r\nasync def mine_cmd(app: Client, msg: Message, mod: Module):\r\n    # highlight-start\r\n    mine = await mod.db.get('mine', False)\r\n    clicks = await mod.db.get('clicks', 0)\r\n    # highlight-end\r\n    get_mine_bot_value = await get_mine_bot(mod)\r\n    # highlight-next-line\r\n    await mod.db.set('mine', not mine)\r\n    if mine:\r\n        # highlight-start\r\n        await mod.db.set('end_mine', time.time())\r\n        start = await mod.db.get('start_mine', 0)\r\n        end = await mod.db.get('end_mine', 0)\r\n        # highlight-end\r\n        if end > start:\r\n            session_time = end - start\r\n            # highlight-next-line\r\n            total_time = await mod.db.get('mine_total_time', 0)\r\n            total_time += session_time\r\n            # highlight-next-line\r\n            await mod.db.set('mine_total_time', total_time)\r\n        # highlight-start\r\n        cases = await mod.db.sql(\"SELECT type_case, SUM(count) FROM mineevo_stats WHERE timee BETWEEN :start_time AND :end_time GROUP BY type_case\", start_time=start, end_time=end)\r\n        busts = await mod.db.sql(\"SELECT type_bust, SUM(count) FROM mineevo_stats WHERE timee BETWEEN :start_time AND :end_time GROUP BY type_bust\", start_time=start, end_time=end)\r\n        # highlight-end\n"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(o,{...e})}):o(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>a,x:()=>d});var t=s(6540);const i={},r=t.createContext(i);function a(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);