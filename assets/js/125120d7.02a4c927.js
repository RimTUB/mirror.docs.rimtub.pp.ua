"use strict";(self.webpackChunkrim_tub_docs_release=self.webpackChunkrim_tub_docs_release||[]).push([[7865],{540:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>a,default:()=>c,frontMatter:()=>i,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"other_handlers","title":"Other Handlers","description":"In addition to command handlers, you also need to know how to create your own handlers.","source":"@site/docs/08_other_handlers.md","sourceDirName":".","slug":"/other_handlers","permalink":"/docs/other_handlers","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"title":"Other Handlers","sidebar_position":8,"slug":"other_handlers","id":"other_handlers"},"sidebar":"tutorialSidebar","previous":{"title":"Command Handlers","permalink":"/docs/commands_handlers"},"next":{"title":"@mod.on_ready","permalink":"/docs/mod/on_ready"}}');var o=r(4848),s=r(8453);const i={title:"Other Handlers",sidebar_position:8,slug:"other_handlers",id:"other_handlers"},a=void 0,d={},l=[{value:"Where to get the module group?",id:"where-to-get-the-module-group",level:3},{value:"Examples",id:"examples",level:2}];function m(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:"In addition to command handlers, you also need to know how to create your own handlers."}),"\n",(0,o.jsxs)(n.p,{children:["Handlers can be created in the usual way, just make sure to specify the ",(0,o.jsx)(n.code,{children:"group"})," for the ",(0,o.jsx)(n.strong,{children:"module group"}),"."]}),"\n",(0,o.jsx)(n.p,{children:(0,o.jsx)(n.a,{href:"https://docs.kurigram.live/api/decorators/",children:"Documentation on handlers in Pyrogram"})}),"\n",(0,o.jsx)(n.h3,{id:"where-to-get-the-module-group",children:"Where to get the module group?"}),"\n",(0,o.jsxs)(n.p,{children:["Either use ",(0,o.jsx)(n.code,{children:"mod.group"})," (default group) or create a new one: ",(0,o.jsx)(n.code,{children:"mod.get_group()"})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",metastring:'title="AdRimTUB/__init__.py" showLineNumbers',children:"from utils import *\r\nfrom pyrogram import filters\r\n\r\nad_text = f\"\"\"\r\n{b('\ud83d\ude80 RimTUB \u2014 an advanced userbot for Telegram!')}\r\n\r\n\ud83d\udd39 Flexible module system: easily add and configure new features.  \r\n\ud83d\udd39 Open source: security and customization options.  \r\n\ud83d\udd39 Simple installation: set up in minutes and start using!  \r\n\r\nJoin the community and unlock new possibilities in Telegram!  \r\n\r\n\ud83d\udd17 {b('GitHub')} {a('github.com/RimTUB/RimTUB', 'https://github.com/RimTUB/RimTUB')}  \r\n\ud83d\udce2 {b('Channel')} @RimTUB\r\n\"\"\"\r\n\r\nasync def main(app: Client, mod: Module):\r\n\r\n    @app.on_message(\r\n        filters.text & ~filters.me & text_filter(\"#RimTUB\"),\r\n        # highlight-next-line\r\n        group=mod.get_group()\r\n    )\r\n    async def _RimTUB(_, msg):\r\n        await msg.reply(ad_text, quote=True)\n"})}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.admonition,{type:"info",children:(0,o.jsxs)(n.p,{children:["The following example is taken from the ",(0,o.jsx)(n.strong,{children:"MineEvoMiner"})," module (version 2.5) by a third-party developer ",(0,o.jsx)(n.a,{href:"https://t.me/Kotcananacom",children:"@Kotcananacom"})]})}),"\n",(0,o.jsx)(n.admonition,{type:"warning",children:(0,o.jsxs)(n.p,{children:["This example was written for RimTUB 2.1, so the HelpList in this example is ",(0,o.jsx)(n.strong,{children:"outdated!"})]})}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-py",metastring:'title="MineEvoMiner/__init__.py" showLineNumbers',children:"from utils import *\r\nfrom .miner import *\r\nfrom .stats.stat import *\r\nfrom .helplist import module_help # Note! RimTUB 2.2 uses a different HelpList system!\r\n\r\n\r\n\r\nasync def main(app: Client, mod: Module):\r\n\r\n    cmd = mod.cmd\r\n    module_help(mod) # Note! RimTUB 2.2 uses a different HelpList system!\r\n\r\n    @mod.on_ready\r\n    async def _onr(app): await stats_ready(app, mod)\r\n\r\n    @cmd('mbc')\r\n    async def _mbc(*args): await beautiful_case_found(*args, mod)\r\n\r\n    # highlight-next-line\r\n    @app.on_message(filters.chat(mine_bots_us) & ~filters.me, group=mod.get_group())\r\n    async def _found_cases(*args): await found_cases(*args, mod)\r\n\r\n    # highlight-next-line\r\n    @app.on_message(filters.chat(list(mine_bots.values())) & filters.text & ~filters.me, group=mod.get_group())\r\n    async def _count_clicks(*args): await count_clicks(*args, mod)\r\n\r\n    # highlight-next-line\r\n    @app.on_message(filters.chat(mine_bots_us) & filters.text & ~filters.me, group=mod.get_group())\r\n    async def _count_plasma(*args): await plasma_count(*args, mod)\r\n\r\n    ...\n"})})]})}function c(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(m,{...e})}):m(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>i,x:()=>a});var t=r(6540);const o={},s=t.createContext(o);function i(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);