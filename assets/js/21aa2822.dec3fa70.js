"use strict";(self.webpackChunkrim_tub_docs_release=self.webpackChunkrim_tub_docs_release||[]).push([[5372],{454:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>d,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"module_structure","title":"Module Structure","description":"A module in the project is a folder with Python files in the plugins directory.","source":"@site/docs/04_module_structure.md","sourceDirName":".","slug":"/module_structure","permalink":"/docs/module_structure","draft":false,"unlisted":false,"tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"title":"Module Structure","sidebar_position":4,"slug":"module_structure","id":"module_structure"},"sidebar":"tutorialSidebar","previous":{"title":"Technical Information","permalink":"/docs/technical_information"},"next":{"title":"Module","permalink":"/docs/module"}}');var s=r(4848),t=r(8453);const o={title:"Module Structure",sidebar_position:4,slug:"module_structure",id:"module_structure"},l="Module Structure",d={},c=[{value:"<code>__init__.py</code>",id:"__init__py",level:2},{value:"<code>manifest.yaml</code>",id:"manifestyaml",level:2},{value:"<code>.rimtubignore</code>",id:"rimtubignore",level:2}];function a(e){const n={a:"a",admonition:"admonition",br:"br",code:"code",em:"em",h1:"h1",h2:"h2",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,t.R)(),...e.components},{Details:r}=n;return r||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"module-structure",children:"Module Structure"})}),"\n",(0,s.jsxs)(n.p,{children:["A module in the project is a folder with Python files in the ",(0,s.jsx)(n.code,{children:"plugins"})," directory.",(0,s.jsx)(n.br,{}),"\n","The module folder is your small state. You can do whatever you want there, split your code into as many files as you need. Need additional files? Upload them! Need storage somewhere? Create your own storage! Just make sure to specify what should be passed and what should not in the ",(0,s.jsx)(n.a,{href:"#rimtubignore",children:(0,s.jsx)(n.code,{children:".rimtubignore"})}),"."]}),"\n",(0,s.jsx)(n.admonition,{title:"Note",type:"info",children:(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["The folder should be named in ",(0,s.jsx)(n.strong,{children:"CamelCase"}),". For example, ",(0,s.jsx)(n.code,{children:"ExampleModule"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["The module name should reflect its functionality. For example, ",(0,s.jsx)(n.code,{children:"PythonRunner"}),", ",(0,s.jsx)(n.code,{children:"TimeTools"}),", ",(0,s.jsx)(n.code,{children:"Terminal"}),"."]}),"\n",(0,s.jsxs)(n.li,{children:["Funny-sounding names are welcome. For example, ",(0,s.jsx)(n.code,{children:"Carbonara"})," (from Carbon)."]}),"\n"]})}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:'title="/RimTUB/"',children:".\r\n\u2514\u2500\u2500\u2500plugins\r\n    \u251c\u2500\u2500\u2500Calculator\r\n    \u2502       __init__.py\r\n    \u2502       manifest.yaml\r\n    \u2502\r\n    \u251c\u2500\u2500\u2500Fishh\r\n    \u2502       __init__.py\r\n    \u2502       manifest.yaml\r\n    \u2502       worker.py\r\n    \u2502\r\n    \u2514\u2500\u2500\u2500ExampleModule\r\n        \u2502   __init__.py\r\n        \u2502   manifest.yaml\r\n        \u2502   utils.py\r\n        \u2502   file.txt\r\n        \u2502   .rimtubignore\r\n        \u2502\r\n        \u2514\u2500\u2500\u2500dir\r\n            | ...\r\n        \r\n\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the module folder, ",(0,s.jsx)(n.strong,{children:"you must"})," have the ",(0,s.jsx)(n.code,{children:"__init__.py"})," and ",(0,s.jsx)(n.code,{children:"manifest.yaml"})," files."]}),"\n",(0,s.jsx)(n.h2,{id:"__init__py",children:(0,s.jsx)(n.code,{children:"__init__.py"})}),"\n",(0,s.jsx)(n.p,{children:"The main file of the module. It must include the following function:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",children:"async def main(app: Client, mod: Module):\n"})}),"\n",(0,s.jsx)(n.p,{children:"In this function, handlers are declared."}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:["Example ",(0,s.jsx)(n.code,{children:"__init__.py"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-py",metastring:'title="Hello/__init__.py" showLineNumbers',children:"from utils import *\r\n\r\nasync def main(app: Client, mod: Module):\r\n\r\n    cmd = mod.cmd\r\n    \r\n    @cmd('hello')\r\n    async def _hello(_, msg: M):\r\n        await msg.edit(\"HELLO!!!\")\r\n\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"manifestyaml",children:(0,s.jsx)(n.code,{children:"manifest.yaml"})}),"\n",(0,s.jsx)(n.p,{children:"All technical information about the module.\r\nThis file contains all the details about the module: version, author, developer, dependencies, help list, etc."}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"module_name"})," (",(0,s.jsx)(n.em,{children:"str"}),") - The module's name. It should match the folder name."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"version"})," (",(0,s.jsx)(n.em,{children:"str"}),") - The module's version."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"native_RimTUB_version"})," (",(0,s.jsx)(n.em,{children:"str"}),") - The original version of RimTUB for which the module was written."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"available_RimTUB_versions"})," (",(0,s.jsx)(n.em,{children:"list of str"}),") - List of RimTUB versions on which the module works."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"online_check_RimTUB_versions"})," (",(0,s.jsx)(n.em,{children:"boolean"}),") - Whether to check for online available versions of RimTUB that the module works on."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"description"})," (",(0,s.jsx)(n.em,{children:"str"}),") - A description of the module."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"author"})," (",(0,s.jsx)(n.em,{children:"str"}),") - The module's author."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.code,{children:"sections"})," (",(0,s.jsx)(n.em,{children:"dict"}),") - Help list registration (see Help List)."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)("a",{id:"manifest-yaml--requirements"}),(0,s.jsx)(n.code,{children:"requirements"})," (",(0,s.jsx)(n.em,{children:"dict[str: str]"}),") - Dependencies (see Dependencies)."]}),"\n"]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:["Example ",(0,s.jsx)(n.code,{children:"manifest.yaml"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-yaml",metastring:'title="TestM/manifest.yaml" showLineNumbers',children:"module_name: TestM\r\n\r\nversion: 2.2-1.0.0\r\nnative_RimTUB_version: 2.2\r\navailable_RimTUB_versions:\r\n    - 2.2\r\n    - dev-2.2\r\nonline_check_RimTUB_versions: Off\r\n\r\ndescription: |\r\n    Test module for module developers.\r\n\r\nauthor: built-in (@RimMirK)\r\n\r\nsections:\r\n    _:\r\n        commands:\r\n            - names: [test, t]\r\n              arguments:\r\n                  - {text: required argument,   req: Yes}\r\n                  - {text: Optional argument, req: No }\r\n              description: Test\r\n            - {\r\n                names: [ulala, ula],\r\n                arguments: ~,\r\n                description: Ulala\r\n            }\r\n        features:\r\n            - title: Title\r\n              description: Description\r\n    testing:\r\n        description: Test part\r\n\r\nrequirements:\r\n    telebot:\r\n        check: import telebot; telebot.__version__ == '4.26.0'\r\n        install: pyTelegramBotAPI==4.26.0\n"})})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h2,{id:"rimtubignore",children:(0,s.jsx)(n.code,{children:".rimtubignore"})}),"\n",(0,s.jsxs)(n.p,{children:["The ",(0,s.jsx)(n.code,{children:".rimtubignore"})," file is used in the module to specify which files and directories should be ignored when sending the module (for example, with the ",(0,s.jsx)(n.code,{children:".sm"})," command). This is similar to the ",(0,s.jsx)(n.code,{children:".gitignore"})," file in Git, which excludes certain files or folders from version control."]}),"\n",(0,s.jsxs)(n.p,{children:["You can learn more about such files ",(0,s.jsx)(n.a,{href:"https://git-scm.com/docs/gitignore",children:"here"}),"."]}),"\n",(0,s.jsxs)(r,{children:[(0,s.jsxs)("summary",{children:["Example ",(0,s.jsx)(n.code,{children:".rimtubignore"})]}),(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-gitignore",metastring:'title="TestM/.rimtubignore" showLineNumbers',children:"# Ignore all .log files\r\n*.log\r\n\r\n# Ignore the folder with temporary files\r\ntmp/\r\n\r\n# Ignore the confidential configuration file\r\nconfig/secrets.json\n"})})]})]})}function h(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(a,{...e})}):a(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>o,x:()=>l});var i=r(6540);const s={},t=i.createContext(s);function o(e){const n=i.useContext(t);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),i.createElement(t.Provider,{value:n},e.children)}}}]);